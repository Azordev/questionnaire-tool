{
    "skill": {
        "Pnpm": {
            "description": "",
            "resources": [],
            "parents": [],
            "children": [],
            "questions": [
                {
                    "id": "1",
                    "question": "What is pnpm?",
                    "description": "Select the option that best describes pnpm.",
                    "hint": "Consider the purpose and functionality of pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "A task runner for JavaScript projects.",
                            "points": 0,
                            "explanation": "Incorrect. pnpm is not a task runner; it's a package manager."
                        },
                        {
                            "label": "B",
                            "description": "A package manager for JavaScript projects.",
                            "points": 3,
                            "explanation": "Correct! pnpm is a package manager for JavaScript projects, like npm or yarn."
                        },
                        {
                            "label": "C",
                            "description": "A testing framework for JavaScript projects.",
                            "points": 0,
                            "explanation": "Incorrect. pnpm is not a testing framework; it's a package manager."
                        }
                    ]
                },
                {
                    "id": "2",
                    "question": "What advantage does pnpm offer over other package managers?",
                    "description": "Choose the correct statement regarding the advantage of pnpm.",
                    "hint": "Consider the unique features or benefits of pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm uses a global package store shared by all projects.",
                            "points": 0,
                            "explanation": "Incorrect. pnpm uses a per-project store, not a global one shared by all projects."
                        },
                        {
                            "label": "B",
                            "description": "pnpm stores dependencies in a content-addressable filesystem.",
                            "points": 3,
                            "explanation": "Correct! pnpm stores dependencies in a content-addressable filesystem for efficient sharing."
                        },
                        {
                            "label": "C",
                            "description": "pnpm requires an internet connection to install dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. pnpm can work offline once dependencies are installed for a project."
                        }
                    ]
                },
                {
                    "id": "3",
                    "question": "How can you install dependencies using pnpm?",
                    "description": "Select the correct command to install project dependencies using pnpm.",
                    "hint": "Consider the command used by pnpm for installing dependencies.",
                    "options": [
                        {
                            "label": "A",
                            "description": "npm install",
                            "points": 0,
                            "explanation": "Incorrect. The correct command for pnpm is different from npm."
                        },
                        {
                            "label": "B",
                            "description": "yarn add",
                            "points": 0,
                            "explanation": "Incorrect. The correct command for pnpm is different from yarn."
                        },
                        {
                            "label": "C",
                            "description": "pnpm install",
                            "points": 3,
                            "explanation": "Correct! 'pnpm install' is the command to install dependencies using pnpm."
                        }
                    ]
                },
                {
                    "id": "4",
                    "question": "What is the purpose of the pnpm-lock.yaml file?",
                    "description": "Choose the correct explanation for the pnpm-lock.yaml file.",
                    "hint": "Consider the role of the lock file in package management.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpm-lock.yaml file contains specific dependency versions and resolutions."
                        },
                        {
                            "label": "B",
                            "description": "It is a configuration file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpm-lock.yaml file is not a configuration file; it's a lock file."
                        },
                        {
                            "label": "C",
                            "description": "It locks the versions of the project's dependencies.",
                            "points": 3,
                            "explanation": "Correct! The pnpm-lock.yaml file locks the versions of the project's dependencies for consistent installations."
                        }
                    ]
                },
                {
                    "id": "5",
                    "question": "How can you uninstall dependencies using pnpm?",
                    "description": "Select the correct command to uninstall project dependencies using pnpm.",
                    "hint": "Consider the command used by pnpm for uninstalling dependencies.",
                    "options": [
                        {
                            "label": "A",
                            "description": "npm uninstall",
                            "points": 0,
                            "explanation": "Incorrect. The correct command for pnpm is different from npm."
                        },
                        {
                            "label": "B",
                            "description": "yarn remove",
                            "points": 0,
                            "explanation": "Incorrect. The correct command for pnpm is different from yarn."
                        },
                        {
                            "label": "C",
                            "description": "pnpm remove",
                            "points": 3,
                            "explanation": "Correct! 'pnpm remove' is the command to uninstall dependencies using pnpm."
                        }
                    ]
                },
                {
                    "id": "6",
                    "question": "What command is used to check for outdated dependencies in pnpm?",
                    "description": "Select the correct command to check for outdated dependencies in a pnpm project.",
                    "hint": "Consider the command used by pnpm for checking outdated dependencies.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm outdated",
                            "points": 3,
                            "explanation": "Correct! 'pnpm outdated' is the command to check for outdated dependencies in pnpm."
                        },
                        {
                            "label": "B",
                            "description": "pnpm update",
                            "points": 0,
                            "explanation": "Incorrect. 'pnpm update' updates dependencies but doesn't check for outdated ones."
                        },
                        {
                            "label": "C",
                            "description": "pnpm list outdated",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm outdated' for checking outdated dependencies."
                        }
                    ]
                },
                {
                    "id": "7",
                    "question": "What is the purpose of the pnpm-workspace.yaml file?",
                    "description": "Choose the correct explanation for the pnpm-workspace.yaml file.",
                    "hint": "Consider the role of the workspace file in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It contains metadata about the project's workspaces.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpm-workspace.yaml file contains information specific to pnpm's workspace feature."
                        },
                        {
                            "label": "B",
                            "description": "It is a configuration file for pnpm workspaces.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpm-workspace.yaml file is not a configuration file; it's a lock file specific to pnpm workspaces."
                        },
                        {
                            "label": "C",
                            "description": "It locks the versions of the project's dependencies in a pnpm workspace.",
                            "points": 3,
                            "explanation": "Correct! The pnpm-workspace.yaml file locks the versions of the project's dependencies in a pnpm workspace for consistent installations."
                        }
                    ]
                },
                {
                    "id": "8",
                    "question": "What is the purpose of the pnpm-link.yaml file?",
                    "description": "Choose the correct explanation for the pnpm-link.yaml file.",
                    "hint": "Consider the role of the link file in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It contains metadata about the project's linked packages.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpm-link.yaml file contains information specific to linked packages in a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "It is a configuration file for pnpm linking.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpm-link.yaml file is not a configuration file; it's a lock file specific to pnpm linking."
                        },
                        {
                            "label": "C",
                            "description": "It tracks the links between packages in a pnpm project.",
                            "points": 3,
                            "explanation": "Correct! The pnpm-link.yaml file tracks the links between packages in a pnpm project for efficient linking."
                        }
                    ]
                },
                {
                    "id": "9",
                    "question": "How can you list installed packages in a pnpm project?",
                    "description": "Select the correct command to display a list of installed packages in a pnpm project.",
                    "hint": "Consider the command used by pnpm for listing installed packages.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm show",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is different from 'pnpm show' for listing installed packages."
                        },
                        {
                            "label": "B",
                            "description": "pnpm ls",
                            "points": 3,
                            "explanation": "Correct! 'pnpm ls' is the command to list installed packages in a pnpm project."
                        },
                        {
                            "label": "C",
                            "description": "pnpm list",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm ls' for listing installed packages."
                        }
                    ]
                },
                {
                    "id": "10",
                    "question": "What is the purpose of the pnpmfile.js file?",
                    "description": "Choose the correct explanation for the pnpmfile.js file.",
                    "hint": "Consider the role of the pnpmfile.js file in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It contains metadata about the project's scripts.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpmfile.js file is not for storing metadata about scripts; it's for customization."
                        },
                        {
                            "label": "B",
                            "description": "It is a configuration file for pnpm.",
                            "points": 3,
                            "explanation": "Correct! The pnpmfile.js file allows customization of pnpm behavior for a project."
                        },
                        {
                            "label": "C",
                            "description": "It locks the versions of the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpmfile.js file is not used for locking versions; it's for customizing pnpm behavior."
                        }
                    ]
                },
                {
                    "id": "11",
                    "question": "What command is used to display information about a specific package in a pnpm project?",
                    "description": "Select the correct command to show detailed information about a package installed in a pnpm project.",
                    "hint": "Consider how you might inspect details about a specific package.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm info <package-name>",
                            "points": 3,
                            "explanation": "Correct! 'pnpm info <package-name>' displays detailed information about a specific package in a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm show <package-name>",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm info <package-name>' for showing detailed package information."
                        },
                        {
                            "label": "C",
                            "description": "pnpm view <package-name>",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm info <package-name>' for showing detailed package information."
                        }
                    ]
                },
                {
                    "id": "12",
                    "question": "How can you install a package globally using pnpm?",
                    "description": "Select the correct command to install a package globally using pnpm.",
                    "hint": "Consider how you might install a package globally with pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm install -g <package-name>",
                            "points": 0,
                            "explanation": "Incorrect. pnpm does not have a global installation concept like npm. Packages are typically installed per project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm add -g <package-name>",
                            "points": 0,
                            "explanation": "Incorrect. pnpm does not have a global installation concept like npm. Packages are typically installed per project."
                        },
                        {
                            "label": "C",
                            "description": "pnpm add --global <package-name>",
                            "points": 3,
                            "explanation": "Correct! 'pnpm add --global <package-name>' installs a package globally using pnpm."
                        }
                    ]
                },
                {
                    "id": "13",
                    "question": "What is the purpose of the .pnpmfile.js file?",
                    "description": "Choose the correct explanation for the .pnpmfile.js file.",
                    "hint": "Consider the role of the .pnpmfile.js file in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It contains metadata about the project's scripts.",
                            "points": 0,
                            "explanation": "Incorrect. The .pnpmfile.js file is not for storing metadata about scripts; it's for customization."
                        },
                        {
                            "label": "B",
                            "description": "It is a configuration file for pnpm.",
                            "points": 3,
                            "explanation": "Correct! The .pnpmfile.js file allows customization of pnpm behavior for a project."
                        },
                        {
                            "label": "C",
                            "description": "It locks the versions of the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. The .pnpmfile.js file is not used for locking versions; it's for customizing pnpm behavior."
                        }
                    ]
                },
                {
                    "id": "14",
                    "question": "How can you list outdated packages and update them in a pnpm project?",
                    "description": "Select the correct command to list outdated packages and update them in a pnpm project.",
                    "hint": "Consider how you might check for outdated packages and perform updates with pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm outdated",
                            "points": 3,
                            "explanation": "Correct! 'pnpm outdated' lists outdated packages, and 'pnpm update' updates them in a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm update",
                            "points": 0,
                            "explanation": "Incorrect. 'pnpm update' updates packages but doesn't specifically list outdated ones."
                        },
                        {
                            "label": "C",
                            "description": "pnpm update --outdated",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm outdated' for listing outdated packages."
                        }
                    ]
                },
                {
                    "id": "15",
                    "question": "What is the purpose of the .pnpm-lock.yaml file?",
                    "description": "Choose the correct explanation for the .pnpm-lock.yaml file.",
                    "hint": "Consider the role of the lock file in package management.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. The .pnpm-lock.yaml file contains specific dependency versions and resolutions."
                        },
                        {
                            "label": "B",
                            "description": "It is a configuration file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .pnpm-lock.yaml file is not a configuration file; it's a lock file."
                        },
                        {
                            "label": "C",
                            "description": "It locks the versions of the project's dependencies.",
                            "points": 3,
                            "explanation": "Correct! The .pnpm-lock.yaml file locks the versions of the project's dependencies for consistent installations."
                        }
                    ]
                },
                {
                    "id": "16",
                    "question": "How can you install packages from a specific registry using pnpm?",
                    "description": "Select the correct command to install packages from a registry other than the default using pnpm.",
                    "hint": "Consider how you might specify a different registry when installing packages with pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm install --registry=<registry-url>",
                            "points": 3,
                            "explanation": "Correct! 'pnpm install --registry=<registry-url>' installs packages from the specified registry."
                        },
                        {
                            "label": "B",
                            "description": "pnpm add --registry=<registry-url>",
                            "points": 0,
                            "explanation": "Incorrect. The correct syntax is 'pnpm install --registry=<registry-url>' for specifying a registry."
                        },
                        {
                            "label": "C",
                            "description": "pnpm install --from=<registry-url>",
                            "points": 0,
                            "explanation": "Incorrect. The correct syntax is 'pnpm install --registry=<registry-url>' for specifying a registry."
                        }
                    ]
                },
                {
                    "id": "17",
                    "question": "What command is used to run a script defined in the package.json file using pnpm?",
                    "description": "Select the correct command to execute a script defined in the package.json file using pnpm.",
                    "hint": "Consider how you might run scripts in a pnpm project.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm scripts",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm run' to execute scripts, not 'pnpm scripts'."
                        },
                        {
                            "label": "B",
                            "description": "pnpm run <script-name>",
                            "points": 3,
                            "explanation": "Correct! 'pnpm run <script-name>' executes a script defined in the package.json file."
                        },
                        {
                            "label": "C",
                            "description": "pnpm execute <script-name>",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm run <script-name>' to execute a script."
                        }
                    ]
                },
                {
                    "id": "18",
                    "question": "What is the purpose of the pnpmfile.cjs file?",
                    "description": "Choose the correct explanation for the pnpmfile.cjs file.",
                    "hint": "Consider the role of the pnpmfile.cjs file in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It contains metadata about the project's scripts.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpmfile.cjs file is not for storing metadata about scripts; it's for customization."
                        },
                        {
                            "label": "B",
                            "description": "It is a configuration file for pnpm.",
                            "points": 3,
                            "explanation": "Correct! The pnpmfile.cjs file allows customization of pnpm behavior for a project."
                        },
                        {
                            "label": "C",
                            "description": "It locks the versions of the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpmfile.cjs file is not used for locking versions; it's for customizing pnpm behavior."
                        }
                    ]
                },
                {
                    "id": "19",
                    "question": "How can you check the version of pnpm installed in your project?",
                    "description": "Select the correct command to display the version of pnpm installed in a project.",
                    "hint": "Consider how you might check the version of the pnpm package.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm -v",
                            "points": 3,
                            "explanation": "Correct! 'pnpm -v' displays the version of pnpm installed in the project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm version",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm -v' for checking the version of pnpm."
                        },
                        {
                            "label": "C",
                            "description": "pnpm show version",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm -v' for checking the version of pnpm."
                        }
                    ]
                },
                {
                    "id": "20",
                    "question": "What is the purpose of the pnpm-workspace.yaml file?",
                    "description": "Choose the correct explanation for the pnpm-workspace.yaml file.",
                    "hint": "Consider the role of the workspace file in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It contains metadata about the project's workspaces.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpm-workspace.yaml file contains information specific to pnpm's workspace feature."
                        },
                        {
                            "label": "B",
                            "description": "It is a configuration file for pnpm workspaces.",
                            "points": 0,
                            "explanation": "Incorrect. The pnpm-workspace.yaml file is not a configuration file; it's a lock file specific to pnpm workspaces."
                        },
                        {
                            "label": "C",
                            "description": "It locks the versions of the project's dependencies in a pnpm workspace.",
                            "points": 3,
                            "explanation": "Correct! The pnpm-workspace.yaml file locks the versions of the project's dependencies in a pnpm workspace for consistent installations."
                        }
                    ]
                },
                {
                    "id": "21",
                    "question": "What is the purpose of the .npmrc file in a pnpm project?",
                    "description": "Choose the correct explanation for the .npmrc file.",
                    "hint": "Consider the role of configuration files in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a lock file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .npmrc file is not a lock file; it's used for configuration."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .npmrc file."
                        },
                        {
                            "label": "C",
                            "description": "It holds configuration settings for pnpm.",
                            "points": 3,
                            "explanation": "Correct! The .npmrc file is used for configuring various settings in a pnpm project."
                        }
                    ]
                },
                {
                    "id": "22",
                    "question": "How can you update pnpm to the latest version in your project?",
                    "description": "Select the correct command to update the pnpm version in a project.",
                    "hint": "Consider how you might upgrade the pnpm package.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm install pnpm@latest",
                            "points": 3,
                            "explanation": "Correct! 'pnpm install pnpm@latest' updates the pnpm version in the project to the latest release."
                        },
                        {
                            "label": "B",
                            "description": "pnpm upgrade pnpm",
                            "points": 0,
                            "explanation": "Incorrect. The correct syntax for updating pnpm is 'pnpm install pnpm@latest'."
                        },
                        {
                            "label": "C",
                            "description": "pnpm update pnpm",
                            "points": 0,
                            "explanation": "Incorrect. The correct syntax for updating pnpm is 'pnpm install pnpm@latest'."
                        }
                    ]
                },
                {
                    "id": "23",
                    "question": "What is the purpose of the .npmignore file in a pnpm project?",
                    "description": "Choose the correct explanation for the .npmignore file.",
                    "hint": "Consider the role of the .npmignore file in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a lock file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .npmignore file is not a lock file; it's used for specifying files to be ignored when packaging."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .npmignore file."
                        },
                        {
                            "label": "C",
                            "description": "It specifies files and directories to be ignored when packaging the project.",
                            "points": 3,
                            "explanation": "Correct! The .npmignore file is used to specify files and directories to be ignored when packaging the project for distribution."
                        }
                    ]
                },
                {
                    "id": "24",
                    "question": "How can you run a specific script defined in the package.json file during installation?",
                    "description": "Select the correct command to execute a specific script during package installation in a pnpm project.",
                    "hint": "Consider how you might run scripts during the installation process.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm install --script <script-name>",
                            "points": 0,
                            "explanation": "Incorrect. The correct syntax is 'pnpm install -- <script-name>' for running scripts during installation."
                        },
                        {
                            "label": "B",
                            "description": "pnpm add --run-script <script-name>",
                            "points": 3,
                            "explanation": "Correct! 'pnpm add --run-script <script-name>' executes a specific script during package installation in a pnpm project."
                        },
                        {
                            "label": "C",
                            "description": "pnpm run-script <script-name>",
                            "points": 0,
                            "explanation": "Incorrect. The correct syntax is 'pnpm add --run-script <script-name>' for running scripts during installation."
                        }
                    ]
                },
                {
                    "id": "25",
                    "question": "What is the purpose of the .npmrc.yaml file in a pnpm project?",
                    "description": "Choose the correct explanation for the .npmrc.yaml file.",
                    "hint": "Consider the role of configuration files in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a configuration file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .npmrc.yaml file is not a standard configuration file for pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .npmrc.yaml file."
                        },
                        {
                            "label": "C",
                            "description": "It is not a recognized file in pnpm projects.",
                            "points": 3,
                            "explanation": "Correct! The .npmrc.yaml file is not a standard file in pnpm projects for configuration or other purposes."
                        }
                    ]
                },
                {
                    "id": "26",
                    "question": "How can you create a package lock file in a pnpm project?",
                    "description": "Select the correct command to generate a lock file for the project's dependencies in pnpm.",
                    "hint": "Consider how you might create a lock file in pnpm similar to other package managers.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm create-lockfile",
                            "points": 3,
                            "explanation": "Correct! 'pnpm create-lockfile' generates a lock file for the project's dependencies in pnpm."
                        },
                        {
                            "label": "B",
                            "description": "pnpm lock",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm create-lockfile' for generating a lock file."
                        },
                        {
                            "label": "C",
                            "description": "pnpm generate-lockfile",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm create-lockfile' for generating a lock file."
                        }
                    ]
                },
                {
                    "id": "27",
                    "question": "What is the purpose of the .pnp.js file in a pnpm project?",
                    "description": "Choose the correct explanation for the .pnp.js file.",
                    "hint": "Consider the role of the .pnp.js file in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a lock file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .pnp.js file is not a lock file; it's used for Plug'n'Play support in pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .pnp.js file."
                        },
                        {
                            "label": "C",
                            "description": "It provides configuration for Plug'n'Play in pnpm projects.",
                            "points": 3,
                            "explanation": "Correct! The .pnp.js file is used to configure Plug'n'Play support in pnpm projects."
                        }
                    ]
                },
                {
                    "id": "28",
                    "question": "How can you uninstall a package from a pnpm project?",
                    "description": "Select the correct command to remove a package from a pnpm project.",
                    "hint": "Consider how you might uninstall a package in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm uninstall <package-name>",
                            "points": 3,
                            "explanation": "Correct! 'pnpm uninstall <package-name>' removes a package from a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm remove <package-name>",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm uninstall <package-name>' for removing a package."
                        },
                        {
                            "label": "C",
                            "description": "pnpm delete <package-name>",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm uninstall <package-name>' for removing a package."
                        }
                    ]
                },
                {
                    "id": "29",
                    "question": "What is the purpose of the .pnpm-state.json file in a pnpm project?",
                    "description": "Choose the correct explanation for the .pnpm-state.json file.",
                    "hint": "Consider the role of the .pnpm-state.json file in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a lock file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .pnpm-state.json file is not a lock file; it's used for maintaining state information in pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .pnpm-state.json file."
                        },
                        {
                            "label": "C",
                            "description": "It stores state information about the project, such as installed packages and dependencies.",
                            "points": 3,
                            "explanation": "Correct! The .pnpm-state.json file is used for storing state information about the project's packages and dependencies in pnpm."
                        }
                    ]
                },
                {
                    "id": "30",
                    "question": "How can you check for outdated packages without updating them in a pnpm project?",
                    "description": "Select the correct command to list outdated packages without performing updates.",
                    "hint": "Consider how you might check for outdated packages without updating them in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm outdated",
                            "points": 3,
                            "explanation": "Correct! 'pnpm outdated' lists outdated packages without automatically updating them in a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm update --dry-run",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm outdated' for listing outdated packages without updating them."
                        },
                        {
                            "label": "C",
                            "description": "pnpm list --outdated",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm outdated' for listing outdated packages without updating them."
                        }
                    ]
                },
                {
                    "id": "31",
                    "question": "What is the purpose of the .pnpm-store directory in a pnpm project?",
                    "description": "Choose the correct explanation for the .pnpm-store directory.",
                    "hint": "Consider the role of the .pnpm-store directory in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a lock file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .pnpm-store directory is not a lock file; it's used for storing package tarballs and metadata in pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .pnpm-store directory."
                        },
                        {
                            "label": "C",
                            "description": "It stores package tarballs and metadata for efficient package caching in pnpm.",
                            "points": 3,
                            "explanation": "Correct! The .pnpm-store directory is used for efficient package caching in pnpm, storing package tarballs and metadata."
                        }
                    ]
                },
                {
                    "id": "32",
                    "question": "How can you install packages using a specific version range in a pnpm project?",
                    "description": "Select the correct command to install packages with a specific version range in a pnpm project.",
                    "hint": "Consider how you might specify version ranges when installing packages with pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm install <package-name>@<version>",
                            "points": 0,
                            "explanation": "Incorrect. The correct syntax for version ranges is 'pnpm install <package-name>@<version-range>'."
                        },
                        {
                            "label": "B",
                            "description": "pnpm add <package-name>@<version-range>",
                            "points": 3,
                            "explanation": "Correct! 'pnpm add <package-name>@<version-range>' installs a package with a specific version range in a pnpm project."
                        },
                        {
                            "label": "C",
                            "description": "pnpm install <package-name> --save-exact",
                            "points": 0,
                            "explanation": "Incorrect. The '--save-exact' flag is not used for specifying version ranges; use 'pnpm add <package-name>@<version-range>' instead."
                        }
                    ]
                },
                {
                    "id": "33",
                    "question": "What is the purpose of the .yarnrc.yaml file in a pnpm project?",
                    "description": "Choose the correct explanation for the .yarnrc.yaml file.",
                    "hint": "Consider the role of configuration files in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a configuration file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .yarnrc.yaml file is not a standard configuration file for pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .yarnrc.yaml file."
                        },
                        {
                            "label": "C",
                            "description": "It is not a recognized file in pnpm projects.",
                            "points": 3,
                            "explanation": "Correct! The .yarnrc.yaml file is not a standard file in pnpm projects for configuration or other purposes."
                        }
                    ]
                },
                {
                    "id": "34",
                    "question": "How can you create a pnpm workspace in a project?",
                    "description": "Select the correct command to initialize a pnpm workspace.",
                    "hint": "Consider how you might set up a workspace in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm init -w",
                            "points": 3,
                            "explanation": "Correct! 'pnpm init -w' initializes a pnpm workspace in the current project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm create workspace",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm init -w' for initializing a pnpm workspace."
                        },
                        {
                            "label": "C",
                            "description": "pnpm add workspace",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm init -w' for initializing a pnpm workspace."
                        }
                    ]
                },
                {
                    "id": "35",
                    "question": "What is the purpose of the .shrinkwrap.yaml file in a pnpm project?",
                    "description": "Choose the correct explanation for the .shrinkwrap.yaml file.",
                    "hint": "Consider the role of the .shrinkwrap.yaml file in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a lock file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .shrinkwrap.yaml file is not a lock file; it's used for deterministic package installations in pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .shrinkwrap.yaml file."
                        },
                        {
                            "label": "C",
                            "description": "It ensures deterministic installations by locking package versions and dependencies.",
                            "points": 3,
                            "explanation": "Correct! The .shrinkwrap.yaml file ensures deterministic installations by locking package versions and dependencies in pnpm."
                        }
                    ]
                },
                {
                    "id": "36",
                    "question": "How can you install packages from a specific commit or branch using pnpm?",
                    "description": "Select the correct command to install packages from a specific commit or branch in a pnpm project.",
                    "hint": "Consider how you might specify commits or branches when installing packages with pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm install <package-name>@<commit-or-branch>",
                            "points": 3,
                            "explanation": "Correct! 'pnpm install <package-name>@<commit-or-branch>' installs a package from a specific commit or branch in a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm add <package-name>@<commit-or-branch>",
                            "points": 0,
                            "explanation": "Incorrect. The correct syntax for installing from a specific commit or branch is 'pnpm install <package-name>@<commit-or-branch>'."
                        },
                        {
                            "label": "C",
                            "description": "pnpm install <package-name> --branch=<commit-or-branch>",
                            "points": 0,
                            "explanation": "Incorrect. The correct syntax for installing from a specific commit or branch is 'pnpm install <package-name>@<commit-or-branch>'."
                        }
                    ]
                },
                {
                    "id": "37",
                    "question": "What is the purpose of the .yarn directory in a pnpm project?",
                    "description": "Choose the correct explanation for the .yarn directory.",
                    "hint": "Consider the role of the .yarn directory in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a lock file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .yarn directory is not a lock file; it's used for Plug'n'Play support in pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .yarn directory."
                        },
                        {
                            "label": "C",
                            "description": "It is not a recognized directory in pnpm projects.",
                            "points": 3,
                            "explanation": "Correct! The .yarn directory is not a standard directory in pnpm projects."
                        }
                    ]
                },
                {
                    "id": "38",
                    "question": "How can you add a package as a development dependency in a pnpm project?",
                    "description": "Select the correct command to add a package as a development dependency in a pnpm project.",
                    "hint": "Consider how you might specify development dependencies when adding packages with pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm install <package-name> --save-dev",
                            "points": 3,
                            "explanation": "Correct! 'pnpm install <package-name> --save-dev' adds a package as a development dependency in a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm add <package-name> --dev",
                            "points": 0,
                            "explanation": "Incorrect. The correct syntax for adding as a development dependency is 'pnpm install <package-name> --save-dev'."
                        },
                        {
                            "label": "C",
                            "description": "pnpm add <package-name> --development",
                            "points": 0,
                            "explanation": "Incorrect. The correct syntax for adding as a development dependency is 'pnpm install <package-name> --save-dev'."
                        }
                    ]
                },
                {
                    "id": "39",
                    "question": "What is the purpose of the .yarn-integrity file in a pnpm project?",
                    "description": "Choose the correct explanation for the .yarn-integrity file.",
                    "hint": "Consider the role of the .yarn-integrity file in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a lock file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .yarn-integrity file is not a lock file; it's used for integrity checks in pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .yarn-integrity file."
                        },
                        {
                            "label": "C",
                            "description": "It stores integrity information for packages to ensure consistent installations.",
                            "points": 3,
                            "explanation": "Correct! The .yarn-integrity file stores integrity information for packages, ensuring consistent installations in pnpm."
                        }
                    ]
                },
                {
                    "id": "40",
                    "question": "How can you view the dependency tree of a pnpm project?",
                    "description": "Select the correct command to display the dependency tree of a pnpm project.",
                    "hint": "Consider how you might inspect the dependency tree in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm tree",
                            "points": 3,
                            "explanation": "Correct! 'pnpm tree' displays the dependency tree of a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm list --tree",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm tree' for displaying the dependency tree."
                        },
                        {
                            "label": "C",
                            "description": "pnpm dependencies --tree",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm tree' for displaying the dependency tree."
                        }
                    ]
                },
                {
                    "id": "41",
                    "question": "What is the purpose of the .lock.yaml file in a pnpm project?",
                    "description": "Choose the correct explanation for the .lock.yaml file.",
                    "hint": "Consider the role of lock files in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a generic lock file for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .lock.yaml file is not a generic lock file; it's used for specific purposes in pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, but the .lock.yaml file serves a more specific role in pnpm."
                        },
                        {
                            "label": "C",
                            "description": "It is a lock file used for preserving deterministic installations by locking package versions and dependencies.",
                            "points": 3,
                            "explanation": "Correct! The .lock.yaml file is used for preserving deterministic installations by locking package versions and dependencies in pnpm."
                        }
                    ]
                },
                {
                    "id": "42",
                    "question": "How can you audit the dependencies of a pnpm project for security vulnerabilities?",
                    "description": "Select the correct command to perform a security audit on a pnpm project's dependencies.",
                    "hint": "Consider how you might check for security vulnerabilities in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm audit",
                            "points": 3,
                            "explanation": "Correct! 'pnpm audit' performs a security audit on a pnpm project's dependencies."
                        },
                        {
                            "label": "B",
                            "description": "pnpm security-check",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm audit' for performing a security audit."
                        },
                        {
                            "label": "C",
                            "description": "pnpm check --security",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm audit' for performing a security audit."
                        }
                    ]
                },
                {
                    "id": "43",
                    "question": "What is the purpose of the .hooks directory in a pnpm project?",
                    "description": "Choose the correct explanation for the .hooks directory.",
                    "hint": "Consider the role of the .hooks directory in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a directory for custom scripts in pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .hooks directory is not for general custom scripts; it serves a more specific purpose in pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .hooks directory."
                        },
                        {
                            "label": "C",
                            "description": "It is a directory for hook scripts that run at specific lifecycle events during installation.",
                            "points": 3,
                            "explanation": "Correct! The .hooks directory is used for hook scripts that run at specific lifecycle events during installation in pnpm."
                        }
                    ]
                },
                {
                    "id": "44",
                    "question": "How can you create a custom .pnp.js file in a pnpm project?",
                    "description": "Select the correct command to generate a custom .pnp.js file.",
                    "hint": "Consider how you might create a custom .pnp.js file in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm init --pnp",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is not 'pnpm init --pnp' for generating a custom .pnp.js file."
                        },
                        {
                            "label": "B",
                            "description": "pnpm generate-pnp",
                            "points": 3,
                            "explanation": "Correct! 'pnpm generate-pnp' generates a custom .pnp.js file in a pnpm project."
                        },
                        {
                            "label": "C",
                            "description": "pnpm create-pnp",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is not 'pnpm create-pnp' for generating a custom .pnp.js file."
                        }
                    ]
                },
                {
                    "id": "45",
                    "question": "How can you clean the store of a pnpm project, removing unreferenced packages?",
                    "description": "Select the correct command to clean the store and remove unreferenced packages in a pnpm project.",
                    "hint": "Consider how you might clean the store in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm clean",
                            "points": 3,
                            "explanation": "Correct! 'pnpm clean' cleans the store, removing unreferenced packages in a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm prune",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm clean' for cleaning the store."
                        },
                        {
                            "label": "C",
                            "description": "pnpm remove-unused",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm clean' for cleaning the store."
                        }
                    ]
                },
                {
                    "id": "46",
                    "question": "What is the purpose of the .yarn-cache directory in a pnpm project?",
                    "description": "Choose the correct explanation for the .yarn-cache directory.",
                    "hint": "Consider the role of the .yarn-cache directory in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a cache directory for pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .yarn-cache directory is not a standard cache directory for pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .yarn-cache directory."
                        },
                        {
                            "label": "C",
                            "description": "It is not a recognized directory in pnpm projects.",
                            "points": 3,
                            "explanation": "Correct! The .yarn-cache directory is not a standard directory in pnpm projects."
                        }
                    ]
                },
                {
                    "id": "47",
                    "question": "How can you configure a custom registry for pnpm?",
                    "description": "Select the correct command to set up a custom registry for a pnpm project.",
                    "hint": "Consider how you might configure custom registries in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm config set registry <registry-url>",
                            "points": 3,
                            "explanation": "Correct! 'pnpm config set registry <registry-url>' configures a custom registry for a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm set registry <registry-url>",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm config set registry <registry-url>' for configuring a custom registry."
                        },
                        {
                            "label": "C",
                            "description": "pnpm registry set <registry-url>",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm config set registry <registry-url>' for configuring a custom registry."
                        }
                    ]
                },
                {
                    "id": "47",
                    "question": "How can you configure a custom registry for pnpm?",
                    "description": "Select the correct command to set up a custom registry for a pnpm project.",
                    "hint": "Consider how you might configure custom registries in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm config set registry <registry-url>",
                            "points": 3,
                            "explanation": "Correct! 'pnpm config set registry <registry-url>' configures a custom registry for a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm set registry <registry-url>",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm config set registry <registry-url>' for configuring a custom registry."
                        },
                        {
                            "label": "C",
                            "description": "pnpm registry set <registry-url>",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm config set registry <registry-url>' for configuring a custom registry."
                        }
                    ]
                },
                {
                    "id": "48",
                    "question": "How can you configure the location of the pnpm store in a project?",
                    "description": "Select the correct command to set the location of the pnpm store for a project.",
                    "hint": "Consider how you might configure the store location in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm store set <store-path>",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is not 'pnpm store set <store-path>' for configuring the store location."
                        },
                        {
                            "label": "B",
                            "description": "pnpm config set store-dir <store-path>",
                            "points": 3,
                            "explanation": "Correct! 'pnpm config set store-dir <store-path>' configures the location of the pnpm store for a project."
                        },
                        {
                            "label": "C",
                            "description": "pnpm set store-dir <store-path>",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm config set store-dir <store-path>' for configuring the store location."
                        }
                    ]
                },
                {
                    "id": "49",
                    "question": "What is the purpose of the .yarn-hooks directory in a pnpm project?",
                    "description": "Choose the correct explanation for the .yarn-hooks directory.",
                    "hint": "Consider the role of the .yarn-hooks directory in pnpm projects.",
                    "options": [
                        {
                            "label": "A",
                            "description": "It is a directory for custom scripts in pnpm.",
                            "points": 0,
                            "explanation": "Incorrect. The .yarn-hooks directory is not for general custom scripts; it serves a more specific purpose in pnpm."
                        },
                        {
                            "label": "B",
                            "description": "It contains metadata about the project's dependencies.",
                            "points": 0,
                            "explanation": "Incorrect. Metadata about dependencies is typically stored in lock files, not in the .yarn-hooks directory."
                        },
                        {
                            "label": "C",
                            "description": "It is a directory for hook scripts that run at specific lifecycle events during installation.",
                            "points": 3,
                            "explanation": "Correct! The .yarn-hooks directory is used for hook scripts that run at specific lifecycle events during installation in pnpm."
                        }
                    ]
                },
                {
                    "id": "50",
                    "question": "How can you install packages in a pnpm project without saving them to the 'dependencies' or 'devDependencies'?",
                    "description": "Select the correct command to install packages without adding them to 'dependencies' or 'devDependencies' in a pnpm project.",
                    "hint": "Consider how you might install packages without affecting the project's dependency lists in pnpm.",
                    "options": [
                        {
                            "label": "A",
                            "description": "pnpm add <package-name> --no-save",
                            "points": 3,
                            "explanation": "Correct! 'pnpm add <package-name> --no-save' installs a package without adding it to 'dependencies' or 'devDependencies' in a pnpm project."
                        },
                        {
                            "label": "B",
                            "description": "pnpm install <package-name> --no-save",
                            "points": 0,
                            "explanation": "Incorrect. The correct command is 'pnpm add <package-name> --no-save' for installing without saving to 'dependencies' or 'devDependencies'."
                        },
                        {
                            "label": "C",
                            "description": "pnpm add <package-name> --no-save --global",
                            "points": 0,
                            "explanation": "Incorrect. The '--global' flag is not used for installing without saving to 'dependencies' or 'devDependencies'; use 'pnpm add <package-name> --no-save' instead."
                        }
                    ]
                }
            ]
        }
    }
}